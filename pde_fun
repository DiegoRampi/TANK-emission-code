%% Funzione PDE con discrezione spaziale
function Output_array = pde_fun(t, u, NumbersSpatialDiscretisation, D, k_G, cp_G, mu_G, diametro, ~, P, M, R_gas, ~, ~, ~, ~, A_ant, B_ant, ~, H, ~,~, t_riempimento, t_riposo, ~, cycle_duration, ~,TL,T_t,v_avg)



%adattamento nel tempo per fvorire stabilit√† solver durante riempimento e
%svuotamento



number_cycles = floor(t/cycle_duration);


if v_avg < 0
    t = t - (t_riempimento+t_riposo)*number_cycles;
elseif v_avg > 0
    t = t - cycle_duration*(number_cycles);
else
end

% Ricezione input

Concentration_array = u(1:NumbersSpatialDiscretisation);

Temperature_array = u((NumbersSpatialDiscretisation+1):(2*NumbersSpatialDiscretisation));


% Discretizzazione derivate spaziali

dTdy = zeros(NumbersSpatialDiscretisation,1);
d2Tdy2 = zeros(NumbersSpatialDiscretisation,1);
dCdy = zeros(NumbersSpatialDiscretisation,1);
d2Cdy2 = zeros(NumbersSpatialDiscretisation,1);

dy = 1/NumbersSpatialDiscretisation;

y = linspace(0,1,NumbersSpatialDiscretisation);






for i = 2:(NumbersSpatialDiscretisation-1)
    % Calcolo della derivata della concentrazione con il flux limiter
    rC = (Concentration_array(i) - Concentration_array(i-1)) / (Concentration_array(i+1) - Concentration_array(i));
    limiterC = flux_limiter(rC, 'minmod');  % Usa il limiter scelto
    
    dCdy(i) = limiterC * (Concentration_array(i+1) - Concentration_array(i)) / dy;  % Differenza limitata

    
    % Calcolo della derivata della temperatura con il flux limiter
    rT = (Temperature_array(i) - Temperature_array(i-1)) / (Temperature_array(i+1) - Temperature_array(i));
    limiterT = flux_limiter(rT, 'minmod');  % Usa il limiter scelto
    
    dTdy(i) = limiterT * (Temperature_array(i+1) - Temperature_array(i)) / dy;  % Differenza limitata

   
    % derivate seconde solo con central
    d2Tdy2(i) = (Temperature_array(i+1) - 2 * Temperature_array(i) + Temperature_array(i-1)) / dy^2;
    d2Cdy2(i) = (Concentration_array(i+1) - 2 * Concentration_array(i) + Concentration_array(i-1)) / dy^2;

end

dCdy(1) = (Concentration_array(2) - Concentration_array(1)) / (dy);
dTdy(NumbersSpatialDiscretisation) = (Temperature_array(NumbersSpatialDiscretisation) - Temperature_array(NumbersSpatialDiscretisation-1)) / (dy);
dCdy(NumbersSpatialDiscretisation) = (Concentration_array(NumbersSpatialDiscretisation) - Concentration_array(NumbersSpatialDiscretisation-1)) / (dy);


% Calcolo C saturazione con Raoult assumendo gas perfetti

SaturationConcentration = 6894.76*(exp(A_ant - B_ant / (1.8*Temperature_array(1))))/P* P/(R_gas*Temperature_array(1));


Interface_gasDensity=P/(R_gas*Temperature_array(1));


% Definisco v*
v_star = v_avg-(D/Interface_gasDensity).*dCdy(1);

% inizializzazione di un calcolo itarativo per la quantificazione dei
% coefficienti di trasporto

Speed_array = zeros(NumbersSpatialDiscretisation,1);
Gas_density = Speed_array;
Re = Speed_array;
Sc = Speed_array;
Pe_m = Speed_array;
Pe_t = Speed_array;
E_m = Speed_array;
E_t = Speed_array;
alfa = Speed_array;


Gas_density(1) = Interface_gasDensity;

%metodo della bisezione per trovare v

SpeedPreviousIteration = v_star;

LowerLimit = SpeedPreviousIteration/5;

Re(1) =LowerLimit .* diametro.* Gas_density(1) ./ mu_G; % Numero di Reynolds
Re(1) = abs(Re(1));
Pr = mu_G * cp_G / k_G; % Numero di Prandtl
Sc(1) = mu_G / (Gas_density(1)*M * D); % Numero di Schmidt
Pe_m(1) = (1 / (Re(1) .* Sc(1)) + (Re(1) .* Sc(1)) / 192); % Numero di Peclet materiale
Pe_t(1)= (1 / (Re(1) * Pr) + (Re(1) * Pr) / 192); % Numero di Peclet termico
E_m(1)=Pe_m(1)*D; %Coeff. dispersione materiale m^2/s
E_t(1)=Pe_t(1)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
alfa_LL = E_t(1)/Interface_gasDensity/cp_G;
Delta_Speed_LL = LowerLimit - (v_star+alfa_LL./Temperature_array(1).*(dTdy(i)-dTdy(end)));


UpperLimit = SpeedPreviousIteration*5;

Re(1) =UpperLimit .* diametro.* Gas_density(1) ./ mu_G; % Numero di Reynolds
Re(1) = abs(Re(1));
Pr = mu_G * cp_G / k_G; % Numero di Prandtl
Sc(1) = mu_G / (Gas_density(1)*M * D); % Numero di Schmidt
Pe_m(1) = (1 / (Re(1) .* Sc(1)) + (Re(1) .* Sc(1)) / 192); % Numero di Peclet materiale
Pe_t(1)= (1 / (Re(1) * Pr) + (Re(1) * Pr) / 192); % Numero di Peclet termico
E_m(1)=Pe_m(1)*D; %Coeff. dispersione materiale m^2/s
E_t(1)=Pe_t(1)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s




itCount = 0;



Speed_array(1) = LowerLimit + (UpperLimit - LowerLimit)/2;

Re(1) =Speed_array(1) .* diametro.* Gas_density(1) ./ mu_G; % Numero di Reynolds
Re(1) = abs(Re(1));
Pr = mu_G * cp_G / k_G; % Numero di Prandtl
Sc(1) = mu_G / (Gas_density(1)*M * D); % Numero di Schmidt
Pe_m(1) = (1 / (Re(1) .* Sc(1)) + (Re(1) .* Sc(1)) / 192); % Numero di Peclet materiale
Pe_t(1)= (1 / (Re(1) * Pr) + (Re(1) * Pr) / 192); % Numero di Peclet termico
E_m(1)=Pe_m(1)*D; %Coeff. dispersione materiale m^2/s
E_t(1)=Pe_t(1)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
alfa(1) = E_t(1)/Interface_gasDensity/cp_G;

delta_Speed = Speed_array(1) - (v_star+alfa(i)./Temperature_array(1).*(dTdy(i)-dTdy(end)));

% solving the equations to find the true vapour speed at the 
% vapour-liquid interface using the bisection method

while abs(delta_Speed)/abs(Speed_array(1)) > 1e-3 && itCount <100

    itCount = itCount + 1;

    Speed_array(1) = LowerLimit + (UpperLimit - LowerLimit)/2;

    % SpeedPreviousIteration = Speed_array(1);

    Re(1) =Speed_array(1) .* diametro.* Gas_density(1) ./ mu_G; % Numero di Reynolds
    Re(1) = abs(Re(1));
    Pr = mu_G * cp_G / k_G; % Numero di Prandtl
    Sc(1) = mu_G / (Gas_density(1)*M * D); % Numero di Schmidt
    Pe_m(1) = (1 / (Re(1) .* Sc(1)) + (Re(1) .* Sc(1)) / 192); % Numero di Peclet materiale
    Pe_t(1)= (1 / (Re(1) * Pr) + (Re(1) * Pr) / 192); % Numero di Peclet termico
    E_m(1)=Pe_m(1)*D; %Coeff. dispersione materiale m^2/s
    E_t(1)=Pe_t(1)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
    alfa(1) = E_t(1)/Interface_gasDensity/cp_G;

    delta_Speed = Speed_array(1) - (v_star+alfa(i)./Temperature_array(1).*(dTdy(i)-dTdy(end)));

    if delta_Speed*Delta_Speed_LL < 0

        UpperLimit = Speed_array(1);
       

    else
        LowerLimit = Speed_array(1);
        Delta_Speed_LL = delta_Speed;

    end


end


for i = 2:(NumbersSpatialDiscretisation)

    % initialisation of the bisection method for finding the true speed at
    % a given point in space


    % UL calcs

    Speed_UL = Speed_array(1)*5;


    Gas_density(i) = P/(R_gas*(TL + T_t)/2);
    Re(i) =Speed_UL .* diametro.* Gas_density(i) ./ mu_G; % Numero di Reynolds
    Re(i) = abs(Re(i));
    Pr = mu_G * cp_G / k_G; % Numero di Prandtl
    Sc(i) = mu_G / (Gas_density(i)*M * D); % Numero di Schmidt
    Pe_m(i) = (1 / (Re(i) .* Sc(i)) + (Re(i) .* Sc(i)) / 192); % Numero di Peclet materiale
    Pe_t(i)= (1 / (Re(i) * Pr) + (Re(i) * Pr) / 192); % Numero di Peclet termico
    E_m(i)=Pe_m(i)*D; %Coeff. dispersione materiale m^2/s
    E_t(i)=Pe_t(i)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
    alfa(i) = E_t(i)/Interface_gasDensity/cp_G;

    

    % LL calcs

    Speed_LL = Speed_array(1)/5;
    Gas_density(i) = P/(R_gas*Temperature_array(i));
    Re(i) =Speed_LL .* diametro.* Gas_density(i) ./ mu_G; % Numero di Reynolds
    Re(i) = abs(Re(i));
    Pr = mu_G * cp_G / k_G; % Numero di Prandtl
    Sc(i) = mu_G / (Gas_density(i)*M * D); % Numero di Schmidt
    Pe_m(i) = (1 / (Re(i) .* Sc(i)) + (Re(i) .* Sc(i)) / 192); % Numero di Peclet materiale
    Pe_t(i)= (1 / (Re(i) * Pr) + (Re(i) * Pr) / 192); % Numero di Peclet termico
    E_m(i)=Pe_m(i)*D; %Coeff. dispersione materiale m^2/s
    E_t(i)=Pe_t(i)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
    alfa(i) = E_t(i)/Interface_gasDensity/cp_G;

    delta_Speed_LL = Speed_LL - (v_star+alfa(i)./Temperature_array(i).*(dTdy(i)-dTdy(end)));


    %% calcs for i 
    Speed_array(i) = Speed_LL + (Speed_UL - Speed_LL)/2;
    Gas_density(i) = P/(R_gas*Temperature_array(i));
    Re(i) =Speed_array(i) .* diametro.* Gas_density(i) ./ mu_G; % Numero di Reynolds
    Re(i) = abs(Re(i));
    Pr = mu_G * cp_G / k_G; % Numero di Prandtl
    Sc(i) = mu_G / (Gas_density(i)*M * D); % Numero di Schmidt
    Pe_m(i) = (1 / (Re(i) .* Sc(i)) + (Re(i) .* Sc(i)) / 192); % Numero di Peclet materiale
    Pe_t(i)= (1 / (Re(i) * Pr) + (Re(i) * Pr) / 192); % Numero di Peclet termico
    E_m(i)=Pe_m(i)*D; %Coeff. dispersione materiale m^2/s
    E_t(i)=Pe_t(i)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
    alfa(i) = E_t(i)/Interface_gasDensity/cp_G;

    delta_Speed = Speed_array(i) - (v_star+alfa(i)./Temperature_array(i).*(dTdy(i)-dTdy(end)));

    itCount = 0;

    % solving the equations to find the true vapour speed at 
    % a given point in the mesh using the bisection method

    while abs(delta_Speed/Speed_array(1)) > 1e-3 && itCount <100

        itCount = itCount + 1;

        Speed_array(i) = Speed_LL + (Speed_UL - Speed_LL)/2;
        Gas_density(i) = P/(R_gas*Temperature_array(i));
        Re(i) =Speed_array(i) .* diametro.* Gas_density(i) ./ mu_G; % Numero di Reynolds
        Re(i) = abs(Re(i));
        Pr = mu_G * cp_G / k_G; % Numero di Prandtl
        Sc(i) = mu_G / (Gas_density(i)*M * D); % Numero di Schmidt
        Pe_m(i) = (1 / (Re(i) .* Sc(i)) + (Re(i) .* Sc(i)) / 192); % Numero di Peclet materiale
        Pe_t(i)= (1 / (Re(i) * Pr) + (Re(i) * Pr) / 192); % Numero di Peclet termico
        E_m(i)=Pe_m(i)*D; %Coeff. dispersione materiale m^2/s
        E_t(i)=Pe_t(i)*k_G./(Gas_density(1)*M*cp_G); %Coeff. dispersione termica m^2/s
        alfa(i) = E_t(i)/Interface_gasDensity/cp_G;

        delta_Speed = Speed_array(i) - (v_star+alfa(i)./Temperature_array(i).*(dTdy(i)-dTdy(end)));

        if delta_Speed*delta_Speed_LL < 0

            Speed_UL = Speed_array(i);
            

        else
            Speed_LL = Speed_array(i);
            delta_Speed_LL = delta_Speed;

        end

    end

end

dTdt = zeros((NumbersSpatialDiscretisation),1);
dCdt = dTdt;


for i = 2 : (NumbersSpatialDiscretisation-1)

    % calculations of the time derivative

    dTdt_i = (v_avg .* y(i) + (v_star - v_avg)) ./ (v_avg .* t - H) .* dTdy(i) + (alfa(i) ./ (Temperature_array(1) .* (v_avg .* t - H).^2)) * (Temperature_array(i).* d2Tdy2(i) - dTdy(i).^2 + dTdy(1) .* dTdy(i));
    dCdt_i =(v_avg .* y(i) + (v_star - v_avg)) ./ (v_avg .* t - H) .* dCdy(i) + (E_m(i)./ (v_avg .* t - H).^2) .* d2Cdy2(i) - alfa(i)./ (Temperature_array(1).*(v_avg .* t - H).^2) .* (dCdy(i).* (dTdy(i) - dTdy(1)) + Concentration_array(i).* d2Tdy2(i));

    dTdt(i) = dTdt_i;
    dCdt(i) = dCdt_i;

   %  % corrections if something impossibile for a physical POV happens
   % 
   %  % the conditions for dTdt(i) being zeroed are having a point
   %  % temperature higher than the roof temperature and it not decreasing
   %  % i.e. its time partial derivative is positive
   % 
   %  if (Temperature_array(i)) > Temperature_array(end) && dTdt_i>0
   %      %dTdt(i) = (v_avg .* y(i) + (v_star - v_avg)) ./ (v_avg .* t - H) .* dTdy(i) + (alfa(i) ./ (Temperature_array(1) .* (v_avg .* t - H).^2)) * (Temperature_array(i).* d2Tdy2(i) - dTdy(i).^2 + dTdy(1) .* dTdy(i));
   %      dTdt(i) = 0;
   % 
   %  else
   %      dTdt(i) = dTdt_i;
   % 
   % end
   % 
   %  % the conditions for dCdt(i) being zeroed are having a point
   %  % concentration lower than 0 and it not increasing
   %  % i.e. its time partial derivative is negative
   % 
   %  if (Concentration_array(i)) < 0 && dCdt_i<0
   % 
   % 
   %      dCdt(i) = 0;
   %  else
   %      dCdt(i) = dCdt_i;
   % 
   % 
   %  end

    %dCdt(i) =(v_avg .* y(i) + (v_star - v_avg)) ./ (v_avg .* t - H) .* dCdy(i) + (E_m(i)./ (v_avg .* t - H).^2) .* d2Cdy2(i) - alfa(i)./ (Temperature_array(1).*(v_avg .* t - H).^2) .* (dCdy(i).* (dTdy(i) - dTdy(1)) + Concentration_array(i).* d2Tdy2(i));
end

%Dirichelet e Neumann in y=1
% Temperature_array(end)=T_t;

if Speed_array(end)>=0

    % BC for filling and rest: zero space partial derivative at roof
    % spatial coordinate
    Concentration_array_end=Concentration_array(end-1);
    Temperature_array_end = T_t;
else

    % BC for emptying: flow conservation for concentration, IMO should be
    % the case for energy too, but does not work. Needs to be recalculated
    % not in 15 ms, needs some thinking. Also assuming that T = T_inletGas
    % could work. Something fucks off whenever emptying occurs, in point
    % directly before the roof something is off, needs to be looked at.
    Concentration_array_end = Concentration_array(end-1) + Concentration_array(end)*Speed_array(end)*(H-v_avg*t)/E_m(end)*dy;
    %Temperature_array_end = Temperature_array(end-1) + Temperature_array(end)/cp_G*Speed_array(end)*(H-v_avg*t)/E_t(end)*dy;
    Temperature_array_end = T_t;

end

Output_array = zeros(2*NumbersSpatialDiscretisation,1);

% defining and filling the output array for the ODE


Output_array(1) = Concentration_array(1) - SaturationConcentration;

for i = 2 : (NumbersSpatialDiscretisation-1)

Output_array(i) = dCdt(i);

end

Output_array(NumbersSpatialDiscretisation) = Concentration_array_end - Concentration_array(NumbersSpatialDiscretisation);

%Output_array(NumbersSpatialDiscretisation+1) = calc_T_ILG(Temperature_array(1),TL, dTdy(1), dCdy(1), v_avg, h_L, k_G, cpL, rho_liq, DeltaH_evap);

Output_array(NumbersSpatialDiscretisation+1) = TL - Temperature_array(1);

for i = 2 : (NumbersSpatialDiscretisation-1)

Output_array(NumbersSpatialDiscretisation + i) = dTdt(i);

end

Output_array(2*NumbersSpatialDiscretisation) = Temperature_array_end - Temperature_array(end);

end
